// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets/AuthenticatePacket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Authentication {

  /// <summary>Holder for reflection information generated from Packets/AuthenticatePacket.proto</summary>
  public static partial class AuthenticatePacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/AuthenticatePacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuthenticatePacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBQYWNrZXRzL0F1dGhlbnRpY2F0ZVBhY2tldC5wcm90bxIOQXV0aGVudGlj",
            "YXRpb24aF1BhY2tldHMvQXV0aFR5cGVzLnByb3RvIngKEkF1dGhlbnRpY2F0",
            "ZVBhY2tldBIrCghBdXRoVHlwZRgBIAEoDjIZLkF1dGhlbnRpY2F0aW9uLkF1",
            "dGhUeXBlcxIRCglTZXNzaW9uSWQYAiABKAkSEAoIVXNlcm5hbWUYBCABKAkS",
            "EAoIUGFzc3dvcmQYBSABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Authentication.AuthTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Authentication.AuthenticatePacket), global::Authentication.AuthenticatePacket.Parser, new[]{ "AuthType", "SessionId", "Username", "Password" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuthenticatePacket : pb::IMessage<AuthenticatePacket> {
    private static readonly pb::MessageParser<AuthenticatePacket> _parser = new pb::MessageParser<AuthenticatePacket>(() => new AuthenticatePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticatePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Authentication.AuthenticatePacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatePacket(AuthenticatePacket other) : this() {
      authType_ = other.authType_;
      sessionId_ = other.sessionId_;
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatePacket Clone() {
      return new AuthenticatePacket(this);
    }

    /// <summary>Field number for the "AuthType" field.</summary>
    public const int AuthTypeFieldNumber = 1;
    private global::Authentication.AuthTypes authType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authentication.AuthTypes AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 4;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticatePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticatePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthType != other.AuthType) return false;
      if (SessionId != other.SessionId) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AuthType);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthType);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticatePacket other) {
      if (other == null) {
        return;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            authType_ = (global::Authentication.AuthTypes) input.ReadEnum();
            break;
          }
          case 18: {
            SessionId = input.ReadString();
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
