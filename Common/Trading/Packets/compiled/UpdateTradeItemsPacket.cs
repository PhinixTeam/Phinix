// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets/UpdateTradeItemsPacket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Packets/UpdateTradeItemsPacket.proto</summary>
  public static partial class UpdateTradeItemsPacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/UpdateTradeItemsPacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UpdateTradeItemsPacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRQYWNrZXRzL1VwZGF0ZVRyYWRlSXRlbXNQYWNrZXQucHJvdG8SB1RyYWRp",
            "bmcaE1BhY2tldHMvVGhpbmcucHJvdG8iqwEKFlVwZGF0ZVRyYWRlSXRlbXNQ",
            "YWNrZXQSEQoJU2Vzc2lvbklkGAEgASgJEgwKBFV1aWQYAiABKAkSDwoHVHJh",
            "ZGVJZBgDIAEoCRINCgVUb2tlbhgGIAEoCRIiCgVJdGVtcxgEIAMoCzITLlRy",
            "YWRpbmcuUHJvdG9UaGluZxIsCg9PdGhlclBhcnR5SXRlbXMYBSADKAsyEy5U",
            "cmFkaW5nLlByb3RvVGhpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Trading.ThingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.UpdateTradeItemsPacket), global::Trading.UpdateTradeItemsPacket.Parser, new[]{ "SessionId", "Uuid", "TradeId", "Token", "Items", "OtherPartyItems" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UpdateTradeItemsPacket : pb::IMessage<UpdateTradeItemsPacket> {
    private static readonly pb::MessageParser<UpdateTradeItemsPacket> _parser = new pb::MessageParser<UpdateTradeItemsPacket>(() => new UpdateTradeItemsPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTradeItemsPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.UpdateTradeItemsPacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsPacket(UpdateTradeItemsPacket other) : this() {
      sessionId_ = other.sessionId_;
      uuid_ = other.uuid_;
      tradeId_ = other.tradeId_;
      token_ = other.token_;
      items_ = other.items_.Clone();
      otherPartyItems_ = other.otherPartyItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsPacket Clone() {
      return new UpdateTradeItemsPacket(this);
    }

    /// <summary>Field number for the "SessionId" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    /// <summary>
    /// Session ID of the sender
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    /// <summary>
    /// UUID of the sender
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeId" field.</summary>
    public const int TradeIdFieldNumber = 3;
    private string tradeId_ = "";
    /// <summary>
    /// ID of the trade this is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 6;
    private string token_ = "";
    /// <summary>
    /// Unique token used in the result callback to identify which update the result is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Trading.ProtoThing> _repeated_items_codec
        = pb::FieldCodec.ForMessage(34, global::Trading.ProtoThing.Parser);
    private readonly pbc::RepeatedField<global::Trading.ProtoThing> items_ = new pbc::RepeatedField<global::Trading.ProtoThing>();
    /// <summary>
    /// Items the sender is offering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Trading.ProtoThing> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "OtherPartyItems" field.</summary>
    public const int OtherPartyItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Trading.ProtoThing> _repeated_otherPartyItems_codec
        = pb::FieldCodec.ForMessage(42, global::Trading.ProtoThing.Parser);
    private readonly pbc::RepeatedField<global::Trading.ProtoThing> otherPartyItems_ = new pbc::RepeatedField<global::Trading.ProtoThing>();
    /// <summary>
    /// Items the other party is offering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Trading.ProtoThing> OtherPartyItems {
      get { return otherPartyItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTradeItemsPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTradeItemsPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (Uuid != other.Uuid) return false;
      if (TradeId != other.TradeId) return false;
      if (Token != other.Token) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!otherPartyItems_.Equals(other.otherPartyItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= otherPartyItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TradeId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      otherPartyItems_.WriteTo(output, _repeated_otherPartyItems_codec);
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += otherPartyItems_.CalculateSize(_repeated_otherPartyItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTradeItemsPacket other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      items_.Add(other.items_);
      otherPartyItems_.Add(other.otherPartyItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            TradeId = input.ReadString();
            break;
          }
          case 34: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 42: {
            otherPartyItems_.AddEntriesFrom(input, _repeated_otherPartyItems_codec);
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
