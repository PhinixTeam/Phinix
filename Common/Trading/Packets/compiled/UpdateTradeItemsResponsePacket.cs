// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets/UpdateTradeItemsResponsePacket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Packets/UpdateTradeItemsResponsePacket.proto</summary>
  public static partial class UpdateTradeItemsResponsePacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/UpdateTradeItemsResponsePacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UpdateTradeItemsResponsePacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQYWNrZXRzL1VwZGF0ZVRyYWRlSXRlbXNSZXNwb25zZVBhY2tldC5wcm90",
            "bxIHVHJhZGluZxoTUGFja2V0cy9UaGluZy5wcm90bxogUGFja2V0cy9UcmFk",
            "ZUZhaWx1cmVSZWFzb24ucHJvdG8iwQEKHlVwZGF0ZVRyYWRlSXRlbXNSZXNw",
            "b25zZVBhY2tldBIPCgdUcmFkZUlkGAEgASgJEg0KBVRva2VuGAIgASgJEg8K",
            "B1N1Y2Nlc3MYAyABKAgSMgoNRmFpbHVyZVJlYXNvbhgEIAEoDjIbLlRyYWRp",
            "bmcuVHJhZGVGYWlsdXJlUmVhc29uEhYKDkZhaWx1cmVNZXNzYWdlGAUgASgJ",
            "EiIKBUl0ZW1zGAYgAygLMhMuVHJhZGluZy5Qcm90b1RoaW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Trading.ThingReflection.Descriptor, global::Trading.TradeFailureReasonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.UpdateTradeItemsResponsePacket), global::Trading.UpdateTradeItemsResponsePacket.Parser, new[]{ "TradeId", "Token", "Success", "FailureReason", "FailureMessage", "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UpdateTradeItemsResponsePacket : pb::IMessage<UpdateTradeItemsResponsePacket> {
    private static readonly pb::MessageParser<UpdateTradeItemsResponsePacket> _parser = new pb::MessageParser<UpdateTradeItemsResponsePacket>(() => new UpdateTradeItemsResponsePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTradeItemsResponsePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.UpdateTradeItemsResponsePacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsResponsePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsResponsePacket(UpdateTradeItemsResponsePacket other) : this() {
      tradeId_ = other.tradeId_;
      token_ = other.token_;
      success_ = other.success_;
      failureReason_ = other.failureReason_;
      failureMessage_ = other.failureMessage_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTradeItemsResponsePacket Clone() {
      return new UpdateTradeItemsResponsePacket(this);
    }

    /// <summary>Field number for the "TradeId" field.</summary>
    public const int TradeIdFieldNumber = 1;
    private string tradeId_ = "";
    /// <summary>
    /// ID of the trade this is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// Unique token used in the result callback to identify which update the result is for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    /// <summary>
    /// Whether the update was successful
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "FailureReason" field.</summary>
    public const int FailureReasonFieldNumber = 4;
    private global::Trading.TradeFailureReason failureReason_ = 0;
    /// <summary>
    /// Enumerable failure reason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Trading.TradeFailureReason FailureReason {
      get { return failureReason_; }
      set {
        failureReason_ = value;
      }
    }

    /// <summary>Field number for the "FailureMessage" field.</summary>
    public const int FailureMessageFieldNumber = 5;
    private string failureMessage_ = "";
    /// <summary>
    /// Human-readable failure reason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FailureMessage {
      get { return failureMessage_; }
      set {
        failureMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Trading.ProtoThing> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::Trading.ProtoThing.Parser);
    private readonly pbc::RepeatedField<global::Trading.ProtoThing> items_ = new pbc::RepeatedField<global::Trading.ProtoThing>();
    /// <summary>
    /// Items the sender is offering
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Trading.ProtoThing> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTradeItemsResponsePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTradeItemsResponsePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeId != other.TradeId) return false;
      if (Token != other.Token) return false;
      if (Success != other.Success) return false;
      if (FailureReason != other.FailureReason) return false;
      if (FailureMessage != other.FailureMessage) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (FailureReason != 0) hash ^= FailureReason.GetHashCode();
      if (FailureMessage.Length != 0) hash ^= FailureMessage.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TradeId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (FailureReason != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FailureReason);
      }
      if (FailureMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FailureMessage);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (FailureReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailureReason);
      }
      if (FailureMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FailureMessage);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTradeItemsResponsePacket other) {
      if (other == null) {
        return;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.FailureReason != 0) {
        FailureReason = other.FailureReason;
      }
      if (other.FailureMessage.Length != 0) {
        FailureMessage = other.FailureMessage;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TradeId = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 32: {
            failureReason_ = (global::Trading.TradeFailureReason) input.ReadEnum();
            break;
          }
          case 42: {
            FailureMessage = input.ReadString();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
